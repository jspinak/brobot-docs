"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9124],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9981:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:4},o="States",s={unversionedId:"tutorial-basics/states",id:"tutorial-basics/states",title:"States",description:"There are 3 states in the demo: HOME, WORLD, and ISLAND. Each state describes a collection",source:"@site/docs/tutorial-basics/states.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/states",permalink:"/brobot/docs/tutorial-basics/states",draft:!1,editUrl:"https://jspinak.github.io/brobot/docs/tutorial-basics/states.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Initialize Brobot's Environment",permalink:"/brobot/docs/tutorial-basics/init-brobot"},next:{title:"Transitions",permalink:"/brobot/docs/tutorial-basics/transitions"}},l={},c=[{value:"Home",id:"home",level:2},{value:"World",id:"world",level:2},{value:"Island",id:"island",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"states"},"States"),(0,i.kt)("p",null,"There are 3 states in the demo: HOME, WORLD, and ISLAND. Each state describes a collection\nof static images. The images are static in that they don't change their appearance\nand always appear when the state is active. A state image's location on-screen may or may not change."),(0,i.kt)("p",null,"A state has an enum called Name that is used throughout the application to refer to the state. Every state\nstarts with an enum declaration."),(0,i.kt)("h2",{id:"home"},"Home"),(0,i.kt)("p",null,"The snapshot defined with the StateImageObject toWorldButton gives the location we\nexpect to find this object. Snapshots represent possible locations for the image, and\nwhen there is more than one a match will be chosen randomly from all snapshots.   "),(0,i.kt)("p",null,"When a StateImageObject is fixed, it is expected to be found in the same location every time.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@Component\n@Getter\npublic class Home {\n\n    public enum Name implements StateEnum {\n        HOME\n    }\n\n    private StateImageObject toWorldButton = new StateImageObject.Builder()\n            .withImage("toWorldButton")\n            .isFixed()\n            .addSnapshot(new MatchSnapshot(220, 600, 20, 20))\n            .build();\n\n    private State state = new State.Builder(HOME)\n            .withImages(toWorldButton)\n            .build();\n\n    public Home(StateService stateService) { stateService.save(state); }\n}\n')),(0,i.kt)("h2",{id:"world"},"World"),(0,i.kt)("p",null,"If a StateImageObject has no snapshots, the locations of matches will be\ndetermined using probabilities. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@Component\n@Getter\npublic class World {\n\n    public enum Name implements StateEnum {\n        WORLD\n    }\n\n    private StateImageObject searchButton = new StateImageObject.Builder()\n            .withImage("searchButton")\n            .isFixed()\n            .build();\n\n    private State state = new State.Builder(Name.WORLD)\n            .withImages(searchButton)\n            .build();\n\n    public World(StateService stateService) { stateService.save(state); }\n}\n')),(0,i.kt)("h2",{id:"island"},"Island"),(0,i.kt)("p",null,"Images can be defined with multiple image files.  "),(0,i.kt)("p",null,"The action GetText references only GetText snapshots. Every snapshot\nhas an action associated with it; default snapshots (without an explicitly defined\naction) are built as the result of Find operations. A GetText snapshot for a StateRegion\ngives the expected text to find when performing a GetText action on the StateRegion.\nIn our GetText snapshot, we have included a few different expected text results. Some of\nthem are misspelled to simulate the stochasticity of real execution, in which text is\nnot always found as it appears on-screen.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@Component\n@Getter\npublic class Island {\n\n    public enum Name implements StateEnum {\n        ISLAND\n    }\n\n    private StateImageObject islandName = new StateImageObject.Builder()\n            .withImage("castle", "mines", "farms", "forest", "mountains", "lakes")\n            .called("island type text")\n            .isFixed()\n            .build();\n    private StateRegion islandRegion = new StateRegion.Builder()\n            .called("island region")\n            .addSnapshot(new MatchSnapshot.Builder()\n                    .setActionOptions(ActionOptions.Action.GET_TEXT)\n                    .addString("Mines")\n                    .addString("Lakess")\n                    .addString("Farmz")\n                    .build())\n            .build();\n\n    private State state = new State.Builder(Name.ISLAND)\n            .withImages(islandName)\n            .withRegions(islandRegion)\n            .build();\n\n    public Island(StateService stateService) { stateService.save(state); }\n}\n')))}p.isMDXComponent=!0}}]);
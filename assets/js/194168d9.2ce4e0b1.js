"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[128],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var s=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),h=c(n),g=o,b=h["".concat(l,".").concat(g)]||h[g]||d[g]||a;return n?s.createElement(b,i(i({ref:t},p),{},{components:n})):s.createElement(b,i({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var c=2;c<a;c++)i[c]=n[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2},i="The CLASSIFY Action",r={unversionedId:"labeling/classify",id:"labeling/classify",title:"The CLASSIFY Action",description:"Classification requires version 1.0.5 or greater.",source:"@site/docs/labeling/classify.md",sourceDirName:"labeling",slug:"/labeling/classify",permalink:"/brobot/docs/labeling/classify",draft:!1,editUrl:"https://jspinak.github.io/brobot/docs/labeling/classify.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Labeling Images",permalink:"/brobot/docs/labeling/labeling-intro"},next:{title:"Data Structure for Color Analysis",permalink:"/brobot/docs/labeling/color-analysis"}},l={},c=[{value:"Example 1:",id:"example-1",level:2},{value:"Example 2:",id:"example-2",level:2}],p={toc:c};function d(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,s.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-classify-action"},"The CLASSIFY Action"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Classification requires version 1.0.5 or greater."),"  "),(0,o.kt)("p",null,"The CLASSIFY Action differs from Find.COLOR principally in that it finds the largest matches and not the\nmatches with the best scores. The largest matches usually correspond to semantic objects and the CLASSIFY Action\nis usually concerned with finding objects. "),(0,o.kt)("p",null,"CLASSIFY saves two images to the ",(0,o.kt)("em",{parentName:"p"},"history")," folder. "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The scene, with bounding boxes showing the matches and the search regions, and the contents of the matches\ndisplayed to the right of the scene in their own boxes. "),(0,o.kt)("li",{parentName:"ol"},"The scene displayed as classes. Each image is broken down into k-means color clusters, and the first of these\nclusters is chosen as the ",(0,o.kt)("em",{parentName:"li"},"display color")," for the image. This ",(0,o.kt)("em",{parentName:"li"},"display color")," appears on each pixel in the scene where\nthe pixel belongs to this class (i.e. the pixel is most likely to belong to this image). Bounding boxes (in white)\nare drawn around clusters of pixels belonging to a target image's class as well as the search regions (light blue).\nThe selected clusters have bounding boxes in pink. At the right of the scene, the Brobot images are shown with the\ncontents of all of their image files, as well as the colors of the k-means clusters chosen. For example, if the k-means\nchosen was 3, the center colors of the 3 clusters are shown.")),(0,o.kt)("h2",{id:"example-1"},"Example 1:"),(0,o.kt)("p",null,"CLASSIFY with 1 target image, 1 background image, a k-means of 3, and 3 max matches."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'BrobotSettings.saveHistory = true;\nBrobotSettings.mock = true;\nBrobotSettings.screenshot = "kobolds1.png";\n\nActionOptions findClass = new ActionOptions.Builder()\n    .setAction(ActionOptions.Action.CLASSIFY)\n    .setMaxMatchesToActOn(3)\n    .setKmeans(3)\n    .build();\n\nObjectCollection target = new ObjectCollection.Builder()\n        .withImages(classifyState.getKobold())\n        .build();\nObjectCollection additional = new ObjectCollection.Builder()\n        .withImages(classifyState.getGrass())\n        .build();\n\naction.perform(findClass, target, additional);\n')),(0,o.kt)("p",null,"This configuration gives us the following results:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds1.png",src:n(9495).Z,width:"1334",height:"800"}),"  "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds1.png",src:n(3364).Z,width:"1532",height:"800"}),"  "),(0,o.kt)("p",null,"If we change the scene to kobolds2.png, we get the following results:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds2.png",src:n(1133).Z,width:"1334",height:"800"}),"  "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds2.png",src:n(1956).Z,width:"1532",height:"800"})),(0,o.kt)("h2",{id:"example-2"},"Example 2:"),(0,o.kt)("p",null,"To build a labeled dataset for localization, only the best match per scene is needed. If the game character stays\nin this position while screenshots are taken, a large dataset can be built without supervision. Other things\ncould be done to improve the accuracy of the matches, including specifying search regions, using more images\nfor classification, and placing the game character in an area with only grass.   "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ActionOptions findClass = new ActionOptions.Builder()\n    .setAction(ActionOptions.Action.CLASSIFY)\n    .setMaxMatchesToActOn(1)\n    .setKmeans(3)\n    .build();\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds1b.png",src:n(7010).Z,width:"1334",height:"800"}),"  "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds1b.png",src:n(378).Z,width:"1532",height:"800"}),"  "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds2b.png",src:n(6839).Z,width:"1334",height:"800"}),"  "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kobolds2b.png",src:n(5683).Z,width:"1532",height:"800"})))}d.isMDXComponent=!0},9495:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds1-5ec36ca67a9a6de49b9755c0a23069a9.png"},3364:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds1_classes-f5952e602fc51802a11105050fb448de.png"},7010:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds1b-10c93ed9e41294ad667346c2f2a86143.png"},378:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds1b_classes-dd4abdd65861716167855db5daf2bfa8.png"},1133:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds2-68fab1241ba13fcf724faf5bb08a3685.png"},1956:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds2_classes-28e660b70fce2d782d6fe97e1cf9030c.png"},6839:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds2b-7916ac8e040e23eaf646100af674e0a7.png"},5683:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/kobolds2b_classes-00717b4f34d9deec5d37b1701738a735.png"}}]);
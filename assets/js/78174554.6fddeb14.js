"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2214],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=o.createContext({}),c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=c(t),u=i,f=h["".concat(d,".").concat(u)]||h[u]||p[u]||r;return t?o.createElement(f,a(a({ref:n},l),{},{components:t})):o.createElement(f,a({ref:n},l))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=h;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(7462),i=(t(7294),t(3905));const r={sidebar_position:2},a="Combining Find Operations",s={unversionedId:"introduction/finding-objects/combining-finds",id:"introduction/finding-objects/combining-finds",title:"Combining Find Operations",description:"Combining multiple find operations in the same Action can give us better results.",source:"@site/docs/introduction/finding-objects/combining-finds.md",sourceDirName:"introduction/finding-objects",slug:"/introduction/finding-objects/combining-finds",permalink:"/brobot/docs/introduction/finding-objects/combining-finds",draft:!1,editUrl:"https://jspinak.github.io/brobot/docs/introduction/finding-objects/combining-finds.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Using Color",permalink:"/brobot/docs/introduction/finding-objects/using-color"},next:{title:"Motion",permalink:"/brobot/docs/introduction/finding-objects/movement"}},d={},c=[{value:"Nested Finds",id:"nested-finds",level:2},{value:"Confirmed Finds",id:"confirmed-finds",level:2}],l={toc:c};function p(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,o.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"combining-find-operations"},"Combining Find Operations"),(0,i.kt)("p",null,"Combining multiple find operations in the same Action can give us better results.\nThere are two ways to do this with Brobot: Nested Finds, and Confirmed Finds. Both\nmethods require multiple Find operations to be added to the ActionOptions object,\nand call the Find operations in the order they were added to the ActionOptions. As an\nexample, when using the following ActionOptions, the Find.ALL operation would be called\nfirst, and then the Find.COLOR operation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    ActionOptions color = new ActionOptions.Builder()\n            .setAction(ActionOptions.Action.FIND)\n            .setFind(ActionOptions.Find.ALL)\n            .addFind(ActionOptions.Find.COLOR)\n            .build();\n")),(0,i.kt)("p",null,"Combining find methods can give us more accurate matches in scenarios where the\nform and color of an object are not unique. Take the example below, where we are looking\nfor the yellow bars above the kobolds (the top-left bar has blue circles on it).\nA relatively solid bar of color will correspond to other places on the screen, including\nthe green and red bars above the character. On the other hand, the yellow color of\nthe bars would also be found in other places, including on the character's weapon and\ninterspersed throughout the grass. One way to narrow down our search is to look for\nboth a pattern and a color.  "),(0,i.kt)("h2",{id:"nested-finds"},"Nested Finds"),(0,i.kt)("p",null,"Nested Finds find objects inside the matches from the previous Find operation. Given\nthe example above, we would have many matches inside the four yellow bars. The\nActionOptions in the example does not specify the diameter, so the matches can be of\nvarying sizes."),(0,i.kt)("p",null,"The ActionOptions variable ",(0,i.kt)("inlineCode",{parentName:"p"},"keepLargerMatches")," controls whether the Find operations\nshould be Nested Finds or ConfirmedFinds. The default value of ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," will execute a\nNested Find.  "),(0,i.kt)("p",null,"In the below example, all pattern matches from the Find.ALL operation are drawn in\nblue bounding boxes, and the color matches are drawn in pink bounding boxes. To the\nright of the scene are the contents of the color matches. As expected, all color matches\nare some variation of yellow, showing that they are taken only from the pattern matches of\nyellow bars and not from the red or green bars.  "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"nestedFind",src:t(3298).Z,width:"1334",height:"800"}),"  "),(0,i.kt)("h2",{id:"confirmed-finds"},"Confirmed Finds"),(0,i.kt)("p",null,"Confirmed Finds look for matches inside the matches from the first Find operation.\nAll subsequent Find operations are performed on the match regions from the first operation.\nIf a match is found, the match region from the first Find operation will be returned.\nFor a match to exist, all subsequent Find operations need to succeed within its region.\nIn the example above, if a yellow pixel was found in the match region of a solid color bar,\nthe entire bar would be returned as a match object. The size of the match would equal\nthe size of the bar image on file.  "),(0,i.kt)("p",null,"To set the Find operations to Confirmed Finds, the ActionOptions variable\n",(0,i.kt)("inlineCode",{parentName:"p"},"keepLargerMatches")," should be set to true.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    ActionOptions color = new ActionOptions.Builder()\n            .setAction(ActionOptions.Action.FIND)\n            .setFind(ActionOptions.Find.ALL)\n            .addFind(ActionOptions.Find.COLOR)\n            .keepLargerMatches(true)\n            .build();\n")),(0,i.kt)("p",null,"In the below example, the pattern matches from the Find.ALL operation are drawn in\nblue and the color matches are drawn in pink. To the right of the scene are the contents of the\ncolor matches. The pattern match is selected in its original size. Only the yellow bars are selected.  "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"confirmedFind",src:t(9853).Z,width:"1334",height:"800"})))}p.isMDXComponent=!0},9853:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/confirmedFind-c48a2eae105b18fcce074f84db6f026a.png"},3298:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/nestedFind-e379b095dd3f6b19eb910a6c27c1b518.png"}}]);